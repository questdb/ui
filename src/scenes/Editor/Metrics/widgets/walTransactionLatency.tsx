import React from "react"
import uPlot from "uplot"
import type { Widget, WalTransactionLatency } from "../types"
import { sqlValueToFixed } from "../utils"
import { TelemetryTable } from "../../../../consts"

export const walTransactionLatency: Widget = {
  distribution: 1,
  label: "WAL Transaction Latency",
  chartTitle: "WAL Transaction Latency (90th percentile)",
  getDescription: () => (
    <>
      This chart tracks the time required for data to become readable after
      being written. Higher latency may stem from:
      <ul>
        <li>
          Large transaction sizes (refer to Avg Transaction Size chart if
          elevated)
        </li>
        <li>Unordered data requiring additional processing</li>
        <li>
          Write amplification (see dedicated chart if batch size is optimal)
        </li>
        <li>Storage I/O limitations or contention</li>
      </ul>
      Monitor this metric alongside related charts to identify the root cause of
      performance variations and optimize accordingly.
    </>
  ),
  icon:
    '<svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">\n' +
    '    <path d="M28 37H37.18C37.3471 37.4797 37.6333 37.909 38.0117 38.2479C38.3901 38.5867 38.8483 38.824 39.3434 38.9373C39.8386 39.0507 40.3544 39.0365 40.8425 38.896C41.3307 38.7556 41.7751 38.4935 42.1343 38.1343C42.4935 37.7751 42.7556 37.3307 42.896 36.8425C43.0365 36.3544 43.0507 35.8386 42.9373 35.3434C42.824 34.8483 42.5867 34.3901 42.2479 34.0117C41.909 33.6333 41.4797 33.3471 41 33.18V24H39V33.18C38.5806 33.3293 38.1997 33.5701 37.8849 33.8849C37.5701 34.1997 37.3293 34.5806 37.18 35H28V37ZM40 35C40.1978 35 40.3911 35.0586 40.5556 35.1685C40.72 35.2784 40.8482 35.4346 40.9239 35.6173C40.9996 35.8 41.0194 36.0011 40.9808 36.1951C40.9422 36.3891 40.847 36.5673 40.7071 36.7071C40.5673 36.847 40.3891 36.9422 40.1951 36.9808C40.0011 37.0194 39.8 36.9996 39.6173 36.9239C39.4346 36.8482 39.2784 36.72 39.1685 36.5556C39.0586 36.3911 39 36.1978 39 36C39 35.7348 39.1054 35.4804 39.2929 35.2929C39.4804 35.1054 39.7348 35 40 35Z" fill="url(#paint0_linear_56_695)"/>\n' +
    '    <path d="M55.06 20L56.4 18.2L57.2 18.8C57.3731 18.9298 57.5836 19 57.8 19H57.94C58.0703 18.9816 58.1956 18.9377 58.3089 18.8708C58.4221 18.8038 58.521 18.7152 58.6 18.61L61 15.4C61.1591 15.1878 61.2275 14.9211 61.1899 14.6586C61.1524 14.396 61.0122 14.1591 60.8 14L54.4 9.2C54.1878 9.04087 53.9211 8.97254 53.6586 9.01005C53.396 9.04756 53.1591 9.18783 53 9.4L50.6 12.6C50.4409 12.8122 50.3725 13.0789 50.41 13.3414C50.4476 13.604 50.5878 13.8409 50.8 14L51.6 14.6L50.17 16.5C48.2326 15.4828 46.1523 14.7647 44 14.37V12H46C46.2652 12 46.5196 11.8946 46.7071 11.7071C46.8946 11.5196 47 11.2652 47 11V7C47 6.73478 46.8946 6.48043 46.7071 6.29289C46.5196 6.10536 46.2652 6 46 6H34C33.7348 6 33.4804 6.10536 33.2929 6.29289C33.1054 6.48043 33 6.73478 33 7V11C33 11.2652 33.1054 11.5196 33.2929 11.7071C33.4804 11.8946 33.7348 12 34 12H36V14.37C33.9104 14.7609 31.889 15.4548 30 16.43L28.6 14.6L29.4 14C29.5052 13.921 29.5938 13.8221 29.6608 13.7089C29.7277 13.5956 29.7716 13.4703 29.79 13.34C29.8271 13.0779 29.7588 12.8118 29.6 12.6L27.2 9.4C27.0409 9.18783 26.804 9.04756 26.5414 9.01005C26.2789 8.97254 26.0122 9.04087 25.8 9.2L19.4 14C19.2949 14.0788 19.2064 14.1775 19.1395 14.2905C19.0726 14.4035 19.0286 14.5286 19.01 14.6586C18.9915 14.7886 18.9987 14.921 19.0313 15.0482C19.0639 15.1754 19.1212 15.2949 19.2 15.4L21.6 18.6C21.679 18.7052 21.7779 18.7938 21.8911 18.8608C22.0044 18.9277 22.1297 18.9716 22.26 18.99H22.4C22.6164 18.99 22.8269 18.9198 23 18.79L23.8 18.19L25.06 19.86C24.0312 20.8146 23.0969 21.8661 22.27 23H10V25H21C20.264 26.2692 19.6576 27.6093 19.19 29H6V31H18.58C18.2638 32.3126 18.0696 33.6516 18 35H2V37H18C18.0598 38.3474 18.2439 39.6864 18.55 41H6V43H19.15C19.6304 44.3922 20.2502 45.7324 21 47H10V49H22.27C24.0647 51.4991 26.3637 53.594 29.0184 55.1494C31.6732 56.7047 34.6246 57.6859 37.6822 58.0296C40.7397 58.3732 43.8354 58.0718 46.7691 57.1446C49.7029 56.2174 52.4096 54.6852 54.7143 52.6468C57.0191 50.6085 58.8706 48.1093 60.1494 45.3109C61.4282 42.5124 62.1057 39.4768 62.1383 36.4002C62.1709 33.3236 61.5578 30.2743 60.3385 27.4494C59.1193 24.6245 57.3211 22.0867 55.06 20ZM54 11.4L58.8 15L57.6 16.6L52.8 13L54 11.4ZM53.2 15.8L54.8 17L53.54 18.68C53.01 18.27 52.47 17.88 51.91 17.52L53.2 15.8ZM35 8H45V10H35V8ZM38 12H42V14.09C41.34 14 40.67 14 40 14C39.33 14 38.66 14 38 14.09V12ZM22.6 16.6L21.4 15L26.2 11.4L27.4 13L22.6 16.6ZM25.4 17L27 15.8L28.22 17.43C27.66 17.79 27.11 18.17 26.59 18.58L25.4 17ZM23.31 25H27.06C26.0356 26.2098 25.1842 27.556 24.53 29H21.29C21.8114 27.5952 22.4889 26.2535 23.31 25ZM32.55 23C34.8138 21.6887 37.3838 20.9988 40 21C43.9782 21 47.7936 22.5804 50.6066 25.3934C53.4196 28.2064 55 32.0218 55 36C55 39.9782 53.4196 43.7936 50.6066 46.6066C47.7936 49.4196 43.9782 51 40 51C37.3838 51.0012 34.8138 50.3113 32.55 49H34V47H29.84C28.5864 45.8529 27.538 44.5001 26.74 43H32V41H25.88C25.4201 39.7113 25.1408 38.3652 25.05 37H26V35H25.05C25.1408 33.6348 25.4201 32.2887 25.88 31H32V29H26.74C27.538 27.4999 28.5864 26.1471 29.84 25H34V23H32.55ZM20.66 31H23.75C23.3577 32.3006 23.1227 33.6435 23.05 35H20.05C20.1149 33.6492 20.3193 32.3087 20.66 31ZM20.05 37H23.05C23.1227 38.3565 23.3577 39.6994 23.75 41H20.66C20.3193 39.6913 20.1149 38.3508 20.05 37ZM21.29 43H24.53C25.1842 44.444 26.0356 45.7902 27.06 47H23.31C22.4889 45.7465 21.8114 44.4048 21.29 43ZM40 56C37.1162 55.9959 34.2675 55.3682 31.6491 54.1599C29.0306 52.9517 26.7044 51.1915 24.83 49H29.07C31.5469 51.0872 34.5685 52.4233 37.7792 52.8511C40.9899 53.2789 44.2559 52.7805 47.1929 51.4147C50.1299 50.0489 52.6156 47.8724 54.3574 45.1415C56.0991 42.4107 57.0245 39.239 57.0245 36C57.0245 32.761 56.0991 29.5893 54.3574 26.8585C52.6156 24.1276 50.1299 21.9511 47.1929 20.5853C44.2559 19.2195 40.9899 18.7211 37.7792 19.1489C34.5685 19.5767 31.5469 20.9128 29.07 23H24.83C27.0115 20.4496 29.7996 18.4892 32.9377 17.2993C36.0758 16.1094 39.4628 15.7283 42.7868 16.1911C46.1108 16.6539 49.2649 17.9458 51.9586 19.9477C54.6522 21.9496 56.7988 24.5971 58.2006 27.6465C59.6023 30.6958 60.2142 34.0488 59.9798 37.3967C59.7455 40.7446 58.6724 43.9797 56.8594 46.804C55.0465 49.6282 52.552 51.9509 49.6057 53.5579C46.6594 55.165 43.3561 56.0048 40 56Z" fill="url(#paint1_linear_56_695)"/>\n' +
    "    <defs>\n" +
    '        <linearGradient id="paint0_linear_56_695" x1="35.5065" y1="24" x2="35.5065" y2="39.013" gradientUnits="userSpaceOnUse">\n' +
    '            <stop stop-color="#8BE9FD"/>\n' +
    '            <stop offset="1" stop-color="#3EA0B4"/>\n' +
    "        </linearGradient>\n" +
    '        <linearGradient id="paint1_linear_56_695" x1="32.0698" y1="6" x2="32.0698" y2="58.1672" gradientUnits="userSpaceOnUse">\n' +
    '            <stop stop-color="#8BE9FD"/>\n' +
    '            <stop offset="1" stop-color="#3EA0B4"/>\n' +
    "        </linearGradient>\n" +
    "    </defs>\n" +
    "</svg>\n",
  isTableMetric: true,
  querySupportsRollingAppend: true,
  getQuery: ({ tableId, sampleBySeconds, from, to }) => {
    return `
    select created, approx_percentile(latency, 0.9, 3) latency
      from ${TelemetryTable.WAL}
      where 
          event = 105
          and rowCount > 0
          ${tableId ? `and tableId = ${tableId}` : ""}
      sample by ${sampleBySeconds}s
      FROM timestamp_floor('${sampleBySeconds}s', '${from}')
      TO timestamp_floor('${sampleBySeconds}s', '${to}')
      fill(0)
    `
  },
  alignData: (data: WalTransactionLatency[]): uPlot.AlignedData => [
    data.map((l) => new Date(l.created).getTime()),
    data.map((l) => sqlValueToFixed(l.latency)),
  ],
  mapYValue: (rawValue: number) => {
    if (rawValue >= 1000) {
      const seconds = rawValue / 1000
      return `${seconds.toFixed(2)} s`
    }
    return `${rawValue} ms`
  },
}
